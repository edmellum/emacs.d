#+TITLE: David Ed Mellum's Emacs config
#+OPTIONS: TOC:t

* What
  This is my mostly scavanged Emacs init written after a few months of use. It's
  written with org-babel in a "literal programming" fashion.
* Using
  Only tested with Emacs 24. Load it with =(org-babel-load-file
  "/path/to/file")=.
* Config
** Personal info
   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "David Ed Mellum"
           user-mail-address "david@edmellum.com")
   #+END_SRC

** Remove GUI
   Don't need buttons in emacs! By running this early we avoid a flash of
   buttons before they are removed.
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (setq use-dialog-box nil)
   #+END_SRC
** General
   Sanify defaults like shortening prompts and removing help text.
   #+BEGIN_SRC emacs-lisp
     (blink-cursor-mode -1)
     (fset 'yes-or-no-p 'y-or-n-p)
     
     
     (setq inhibit-startup-message t
           initial-scratch-message nil
           fill-column 80
           window-combination-resize t
           tramp-default-method "ssh"
           echo-keystrokes 0.01
           backup-directory-alist `(("." . ,(expand-file-name
                                             "~/.emacs.d/backups"))))
     
     ;; Start Emacs server
     (server-start)
   #+END_SRC
** Indenting
   Always indent with two spaces, never tabs.
   #+BEGIN_SRC emacs-lisp
     (setq indent-tabs-mode nil
           tab-width 2)
   #+END_SRC
** Reverting
   Keep undo history when reverting and enable global-auto-revert. Since we have
   undo history it's cool to auto-revert without prompting.

   TODO: Don't use global-auto-revert with TRAMP.
   #+BEGIN_SRC emacs-lisp
     (defun revert-buffer-keep-undo (&rest -)
       "Revert buffer but keep undo history."
       (interactive)
       (let ((inhibit-read-only t))
         (erase-buffer)
         (insert-file-contents (buffer-file-name))
         (set-visited-file-modtime (visited-file-modtime))
         (set-buffer-modified-p nil)))
     
     (setq revert-buffer-function 'revert-buffer-keep-undo)
     
     ;; Auto refresh buffers
     (global-auto-revert-mode 1)
     
     ;; Also auto refresh dired, but be quiet about it
     (setq global-auto-revert-non-file-buffers t
           auto-revert-verbose nil)
   #+END_SRC
** Scrolling
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time
           mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
           mouse-wheel-follow-mouse 't) ;; scroll window under mouse
   #+END_SRC
** Windows specifics
   #+BEGIN_SRC emacs-lisp
     (if (file-directory-p "c:/cygwin/bin")
         (add-to-list 'exec-path "c:/cygwin/bin"))
   #+END_SRC
** Buffer sanifying
   Use uniquify to get file location specific buffer duplicate names.
   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     
     (setq uniquify-buffer-name-style 'post-forward)
   #+END_SRC
** Encoding
   Ensure everything is using UTF-8.

   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
     (setq locale-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (setq-default buffer-file-coding-system 'utf-8)
      
     ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
   #+END_SRC
** Local elisp paths and ELPA archives
   Set where to install ELPA packages, load path and 

   #+BEGIN_SRC emacs-lisp
     ;; Set path to dependencies
     (setq site-lisp-dir
           (expand-file-name "elisps" user-emacs-directory))
     
     ;; Set up load path
     (add-to-list 'load-path user-emacs-directory)
     (add-to-list 'load-path site-lisp-dir)
     
     ;; Add external projects to load path
     (dolist (project (directory-files site-lisp-dir t "\\w+"))
       (when (file-directory-p project)
         (add-to-list 'load-path project)))
     
     (require 'package)
     (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                              ("marmalade" . "http://marmalade-repo.org/packages/")
                              ("melpa" . "http://melpa.milkbox.net/packages/")))
     
     (dolist (source package-archives)
       (add-to-list 'package-archives source t))
     
   #+END_SRC

** ELPA packages
   #+BEGIN_SRC emacs-lisp
     (package-initialize)
     
     (unless package-archive-contents
       (package-refresh-contents))
     
     (setq my-packages
           '(
             ido
             smex
             json
             magit
             keyfreq
             js2-mode
             magithub
             undo-tree
             yasnippet
             websocket
             projectile
             expand-region
             markdown-mode
             multiple-cursors
             birds-of-paradise-plus-theme
     
             js2-mode
             skewer-mode
             auto-complete
             ;; ac-js2
             ))
     
     (dolist (package my-packages) 
       (unless (package-installed-p package)
         (package-install package)))
     
     (add-to-list 'load-path "~/.emacs.d")
     
   #+END_SRC

** Packages setup
   #+BEGIN_SRC emacs-lisp
     (require 'kite)
     (require 'uniquify)
   #+END_SRC
** Modes
   #+BEGIN_SRC emacs-lisp
     (global-undo-tree-mode)
     (ido-mode t)
     
     (require 'keyfreq)
     (keyfreq-mode 1)
     (keyfreq-autosave-mode 1)
   #+END_SRC
** Ido settings
   #+BEGIN_SRC emacs-lisp
     (setq
      ido-case-fold t
      ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-filename-at-point nil
      ido-max-prospects 10
      
      yas/prompt-functions '(yas/ido-prompt)
      )
   #+END_SRC
** Org mode settings
   
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC
** IRC
   #+BEGIN_SRC emacs-lisp
     (org-babel-load-file "things.org.gpg")
     (delete-file "things.org.el")
   #+END_SRC
** Font settings
   #+BEGIN_SRC emacs-lisp
     (set-default-font "Monofur")
     (set-face-attribute 'default nil :height 150)
   #+END_SRC

** Key bindings
   #+BEGIN_SRC emacs-lisp
     [[https://github.com/magnars/expand-region.el][Magnar's Expand Region]]
     (global-set-key (kbd "C-=") 'er/expand-region)
     
     [[https://github.com/magnars/multiple-cursors.el][Magnar's Multiple Cursors]]
     (global-set-key (kbd "C->") 'mc/mark-next-like-this)
     (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
     (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
     
     (global-set-key (kbd "RET") 'reindent-then-newline-and-indent)
     
     (global-set-key (kbd "C-x C-b") 'ibuffer)

     (global-set-key "\M-s" 'other-window)
     
   #+END_SRC

* Looks
** Theme
   #+BEGIN_SRC emacs-lisp
     (deftheme bubbleberry 
       "bubbleberry - Created by Jasonm23 - 2012-07-02 (+1000) 08:39PM")
     
     (custom-theme-set-variables
      'bubbleberry
      '(linum-format " %7i ")
      '(fringe-mode 10 nil (fringe)))
     
     (custom-theme-set-faces
      'bubbleberry
      ;; basic theming.
      '(default                          ((t (:foreground "#ABAEB3" :background "#222222" ))))
      '(region                           ((t (:background "#101010" ))))
      '(cursor                           ((t (:background "#ffffff" ))))
      '(fringe                           ((t (:background "#222222" :foreground "#ffffff" ))))
      '(linum                            ((t (:background "#222222" :foreground "#2f2f2f" :box nil :height 100 ))))
      '(minibuffer-prompt                ((t (:foreground "#9489C4" :weight bold ))))
      '(minibuffer-message               ((t (:foreground "#ffffff" ))))
      '(mode-line                        ((t (:foreground "#EEE" :background "#222222" ))))
      '(mode-line-inactive               ((t (:foreground "#777777" :background "#222222" :weight light :box nil :inherit (mode-line )))))
      '(vertical-border                  ((t (:foreground "#777777" ))))
     
      '(font-lock-keyword-face           ((t (:foreground "#3ca380"))))
      '(font-lock-type-face              ((t (:foreground "#484879"))))
      '(font-lock-constant-face          ((t (:foreground "#3F5C70"))))
      '(font-lock-variable-name-face     ((t (:foreground "#547B96"))))
      '(font-lock-builtin-face           ((t (:foreground "#6767AE"))))
      '(font-lock-string-face            ((t (:foreground "#699ABC"))))
      '(font-lock-comment-face           ((t (:foreground "#496b83"))))
      '(font-lock-comment-delimiter-face ((t (:foreground "#666688"))))
      '(font-lock-function-name-face     ((t (:foreground "#3ca380"))))
      '(font-lock-doc-string-face        ((t (:foreground "#496B83"))))
     
      '(tooltip ((default nil) (nil nil)))
      '(next-error ((t          (:inherit (region)))))
      '(query-replace ((t       (:inherit (isearch)))))
      '(button ((t              (:inherit (link)))))
      '(fixed-pitch ((t         (:family "Monospace")))) 
      '(variable-pitch ((t      (:family "Sans Serif"))))
      '(escape-glyph ((t        (:foreground "#FF6600"))))
      '(mode-line-emphasis ((t  (:weight bold))))
      '(mode-line-highlight ((t (:box nil (t (:inherit (highlight)))))))
      
      '(highlight 
        ((((class color) (min-colors 88) (background light)) (:background "#003453")) 
         (((class color) (min-colors 88) (background dark))  (:background "#003450")) 
         (((class color) (min-colors 16) (background light)) (:background "#003450")) 
         (((class color) (min-colors 16) (background dark))  (:background "#004560")) 
         (((class color) (min-colors 8))                     (:foreground "#000000" :background "#00FF00")) (t (:inverse-video t))))
     
      '(shadow 
        ((((class color grayscale) (min-colors 88) (background light)) (:foreground "#999999")) 
         (((class color grayscale) (min-colors 88) (background dark))  (:foreground "#999999"))
         (((class color) (min-colors 8) (background light))            (:foreground "#00ff00"))
         (((class color) (min-colors 8) (background dark))             (:foreground "#ffff00"))))
      
      '(trailing-whitespace
        ((((class color) (background light)) (:background "#ff0000"))
         (((class color) (background dark))  (:background "#ff0000")) (t (:inverse-video t))))
      
      '(link
        ((((class color) (min-colors 88) (background light)) (:underline t :foreground "#00b7f0")) 
         (((class color) (background light))                 (:underline t :foreground "#0044FF")) 
         (((class color) (min-colors 88) (background dark))  (:underline t :foreground "#0099aa"))
         (((class color) (background dark))                  (:underline t :foreground "#0099aa")) (t (:inherit (underline)))))
      
      '(link-visited 
        ((default                            (:inherit (link))) 
         (((class color) (background light)) (:inherit (link))) 
         (((class color) (background dark))  (:inherit (link)))))
      
      '(header-line 
        ((default                                      (:inherit (mode-line))) (((type tty)) (:underline t :inverse-video nil)) 
         (((class color grayscale) (background light)) (:box nil :foreground "#222222" :background "#bbbbbb")) 
         (((class color grayscale) (background dark))  (:box nil :foreground "#bbbbbb" :background "#222222")) 
         (((class mono) (background light))            (:underline t :box nil :inverse-video nil :foreground "#000000" :background "#ffffff")) 
         (((class mono) (background dark))             (:underline t :box nil :inverse-video nil :foreground "#ffffff" :background "#000000"))))
      
      '(isearch
        ((((class color) (min-colors 88) (background light)) (:foreground "#99ccee" :background "#444444")) 
         (((class color) (min-colors 88) (background dark))  (:foreground "#bb3311" :background "#444444")) 
         (((class color) (min-colors 16))                    (:foreground "#0088cc" :background "#444444"))
         (((class color) (min-colors 8))                     (:foreground "#0088cc" :background "#444444")) (t (:inverse-video t))))
      
      '(isearch-fail
        ((((class color) (min-colors 88) (background light)) (:background "#ffaaaa"))
         (((class color) (min-colors 88) (background dark))  (:background "#880000"))
         (((class color) (min-colors 16))                    (:background "#FF0000"))
         (((class color) (min-colors 8))                     (:background "#FF0000"))
         (((class color grayscale))                          (:foreground "#888888")) (t (:inverse-video t))))
      
      '(lazy-highlight
        ((((class color) (min-colors 88) (background light)) (:background "#77bbdd"))
         (((class color) (min-colors 88) (background dark)) (:background "#77bbdd"))
         (((class color) (min-colors 16)) (:background "#4499ee"))
         (((class color) (min-colors 8)) (:background "#4499ee")) (t (:underline t))))
      
      '(match
        ((((class color) (min-colors 88) (background light)) (:background "#3388cc"))
         (((class color) (min-colors 88) (background dark)) (:background "#3388cc"))
         (((class color) (min-colors 8) (background light)) (:foreground "#000000" :background "#FFFF00"))
         (((class color) (min-colors 8) (background dark)) (:foreground "#ffffff" :background "#0000FF")) 
         (((type tty) (class mono)) (:inverse-video t)) (t (:background "#888888"))))
      )
     
     (provide-theme 'bubbleberry)
     
   #+END_SRC

** Modeline
   #+BEGIN_SRC emacs-lisp
     (defun shorten-directory (dir max-length)
       "Show up to `max-length' characters of a directory name `dir'."
       (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
             (output ""))
         (when (and path (equal "" (car path)))
           (setq path (cdr path)))
         (setq output (concat (car path) "/" output))
         (setq path (cdr path))
         (while path
           (setq output (concat (substring (car path) 0 1) "/" output))
           (setq path (cdr path)))
         output))
     
     (defun shorten-director (dir max-length)
       (let ((scount (1- (count ?/ dir)))
             (path (abbreviate-file-name dir)))
         (dotimes (i scount)
           (string-match "\\(/\\.?.\\)[^/]+" path)
           (setq path (replace-match "\\1" nil nil path)))
       path))
     
     (setq-default mode-line-format
                   (list
                    ;; the buffer name; the file name as a tool tip
                    " "
                    '(:propertize (:eval (shorten-directory default-directory 15))
                                 face mode-line-folder-face)
     
                    '(:eval (propertize "%b "
                                        'help-echo (buffer-file-name)))
                    
                    ;; line and column
                    "   "
                    "(" ;; '%02' to set to 2 chars at least; prevents flickering
                    (propertize "%02l") ","
                    (propertize "%02c") 
                    ")"
                    
                    ;; relative position, size of file
                    " "
                    (propertize "%p") ;; % above top
                    
                    ;; the current major mode for the buffer.
                    "   "
                    '(:eval (propertize "%m"
                                        'help-echo buffer-file-coding-system))
                    
                    "  "
                    "[" ;; insert vs overwrite mode, input-method in a tooltip
                    '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
                                        'help-echo (concat "Buffer is in "
                                                           (if overwrite-mode "overwrite" "insert") " mode")))
                    
                    ;; was this buffer modified since the last save?
                    '(:eval (when (buffer-modified-p)
                              (concat ","  (propertize "Mod"
                                                       'help-echo "Buffer has been modified"))))
                    
                    ;; is this buffer read-only?
                    '(:eval (when buffer-read-only
                              (concat ","  (propertize "RO"
                                                       'help-echo "Buffer is read-only"))))  
                    "] "
                    
                    ;; add the time, with the date and the emacs uptime in the tooltip
                    "  "
                    '(:eval (propertize (format-time-string "%H:%M")
                                        'help-echo
                                        (concat (format-time-string "%c; ")
                                                (emacs-uptime "Uptime:%hh"))))
                    " --"
                    ;; i don't want to see minor-modes; but if you want, uncomment this:
                    ;; minor-mode-alist  ;; list of minor modes
                    "%-" ;; fill with '-'
                    ))     
     
   #+END_SRC

** Frame
   #+BEGIN_SRC emacs-lisp
     (setq default-frame-alist
           `((border-width . 0)
             (internal-border-width . 0)
             (vertical-scroll-bars . nil)
             (menu-bar-lines . nil)
             (tool-bar-lines . nil)))
   #+END_SRC
